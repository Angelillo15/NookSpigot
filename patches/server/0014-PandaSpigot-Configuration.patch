From 6e27d929a6fa7cf12f9cbe6aa096a65c99321d9c Mon Sep 17 00:00:00 2001
From: hpfxd <me@hpfxd.com>
Date: Sat, 30 Oct 2021 03:44:48 -0400
Subject: [PATCH] PandaSpigot Configuration


diff --git a/build.gradle.kts b/build.gradle.kts
index 501a8c3a..13f92b61 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -8,6 +8,11 @@ val minecraftVersion = "1_8_R3"
 dependencies {
     implementation(project(":pandaspigot-api"))
     implementation("com.hpfxd.pandaspigot:minecraft-server:1.8.8-SNAPSHOT")
+    // PandaSpigot start - Configuration
+    implementation("com.hpfxd.configurate:configurate-eo-yaml:1.0.0") {
+        exclude(group = "org.checkerframework", module = "checker-qual")
+    }
+    // PandaSpigot end
 
     // Minecraft libraries:
     implementation("net.sf.trove4j:trove4j:3.0.3")
@@ -46,6 +51,13 @@ tasks {
         append("META-INF/io.netty.versions.properties")
         archiveBaseName.set("pandaspigot")
         archiveClassifier.set("") // without "-all"
+        // PandaSpigot start - Configuration
+        arrayOf(
+            "com.amihaiemil.eoyaml",
+            "org.spongepowered.configurate",
+            "io.leangen.geantyref",
+        ).forEach { relocate(it, "com.hpfxd.pandaspigot.libs.$it") }
+        // PandaSpigot end
 
         val cbLibsPkg = "org.bukkit.craftbukkit.libs"
 
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
new file mode 100644
index 00000000..f021fd0c
--- /dev/null
+++ b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
@@ -0,0 +1,96 @@
+package com.hpfxd.pandaspigot.config;
+
+import com.google.common.base.Throwables;
+import com.hpfxd.configurate.eoyaml.EOYamlConfigurationLoader;
+import net.minecraft.server.World;
+import org.spongepowered.configurate.CommentedConfigurationNode;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+import org.spongepowered.configurate.objectmapping.ObjectMapper;
+import org.spongepowered.configurate.objectmapping.meta.Comment;
+import org.spongepowered.configurate.util.MapFactories;
+import org.spongepowered.configurate.util.NamingSchemes;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+@ConfigSerializable
+@SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal"})
+public class PandaSpigotConfig {
+    private static PandaSpigotConfig config;
+    private static PandaSpigotWorldConfig defaultWorldConfig;
+    private static final Map<String, PandaSpigotWorldConfig> worldConfigs = new HashMap<>();
+    
+    /**
+     * Initialize the configuration, and load it from a file.
+     * <p>
+     * This is called once on server startup, and every reload.
+     *
+     * @param file The configuration file.
+     */
+    public static void init(File file) {
+        EOYamlConfigurationLoader loader = EOYamlConfigurationLoader.builder()
+                .file(file)
+                .defaultOptions(o -> o
+                        .header("This is the configuration file for PandaSpigot.\n" +
+                                "Use caution when modifying settings, as some may impact gameplay in non-obvious ways.")
+                        .mapFactory(MapFactories.insertionOrdered())
+                        .serializers(build -> build.registerAnnotatedObjects(ObjectMapper.factoryBuilder()
+                                .defaultNamingScheme(NamingSchemes.CAMEL_CASE)
+                                .build())))
+                .build();
+        
+        try {
+            CommentedConfigurationNode root = loader.load();
+            config = root.get(PandaSpigotConfig.class);
+            
+            // worlds
+            CommentedConfigurationNode worldsNode = root.node("worlds")
+                    .comment("The worlds section is for settings which can be configured per-world.\n" +
+                            "\n" +
+                            "Any settings in the \"default\" world will provide default values for\n" +
+                            "other worlds which don't explicitly specify settings.\n" +
+                            "\n" +
+                            "To specify settings for a specific world, just add a new section with the world's name.");
+            ConfigurationNode defaultWorldNode = worldsNode.node("default");
+            defaultWorldConfig = defaultWorldNode.get(PandaSpigotWorldConfig.class);
+            defaultWorldNode.set(defaultWorldConfig); // populate default in config
+            
+            root.set(config); // update backing node
+            loader.save(root);
+            
+            // call after save
+            initWorlds(worldsNode);
+        } catch (Exception e) {
+            throw Throwables.propagate(e);
+        }
+    }
+    
+    private static void initWorlds(ConfigurationNode node) throws Exception {
+        worldConfigs.clear();
+        for (Map.Entry<Object, ? extends ConfigurationNode> entry : node.childrenMap().entrySet()) {
+            Object worldName = entry.getKey();
+            if (worldName.equals("default")) continue; // skip "default"
+            ConfigurationNode worldNode = entry.getValue();
+            
+            PandaSpigotWorldConfig worldConfig = worldNode.get(PandaSpigotWorldConfig.class);
+            
+            worldConfigs.put(worldName.toString(), worldConfig);
+        }
+    }
+    
+    public static PandaSpigotWorldConfig getWorldConfig(String worldName) {
+        return worldConfigs.getOrDefault(worldName, defaultWorldConfig);
+    }
+    
+    public static PandaSpigotWorldConfig getWorldConfig(World world) {
+        return getWorldConfig(world.worldData.getName());
+    }
+    
+    public static PandaSpigotConfig get() {
+        return config;
+    }
+    
+    //------------------------------------------------------------------------
+}
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java
new file mode 100644
index 00000000..9afaf630
--- /dev/null
+++ b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java
@@ -0,0 +1,9 @@
+package com.hpfxd.pandaspigot.config;
+
+import org.spongepowered.configurate.objectmapping.ConfigSerializable;
+import org.spongepowered.configurate.objectmapping.meta.Comment;
+
+@ConfigSerializable
+@SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal"})
+public class PandaSpigotWorldConfig {
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 8e57df17..97699e7f 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -196,6 +196,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             }
             bindAddress = new java.net.InetSocketAddress(inetaddress, this.R());
             }
+            com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) options.valueOf("pandaspigot-settings"));
             // PandaSpigot end
             // PaperSpigot start
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8f3511f8..375d991f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -163,6 +163,8 @@ public abstract class World implements IBlockAccess {
 
     public final org.github.paperspigot.PaperSpigotWorldConfig paperSpigotConfig; // PaperSpigot
 
+    public com.hpfxd.pandaspigot.config.PandaSpigotWorldConfig pandaSpigotConfig; // PandaSpigot
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
 
     public CraftWorld getWorld() {
@@ -180,6 +182,7 @@ public abstract class World implements IBlockAccess {
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
+        this.pandaSpigotConfig = com.hpfxd.pandaspigot.config.PandaSpigotConfig.getWorldConfig(worlddata.getName()); // PandaSpigot
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6f021d50..7da53bcc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -714,6 +714,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
+        com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) console.options.valueOf("pandaspigot-settings")); // PandaSpigot
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -730,6 +731,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperSpigotConfig.init(); // PaperSpigot
+            world.pandaSpigotConfig = com.hpfxd.pandaspigot.config.PandaSpigotConfig.getWorldConfig(world); // PandaSpigot
         }
 
         pluginManager.clearPlugins();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index c9362191..eea9477e 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -130,6 +130,14 @@ public class Main {
                         .defaultsTo(new File("paper.yml"))
                         .describedAs("Yml file");
                 // PaperSpigot End
+
+                // PandaSpigot start
+                acceptsAll(asList("pandaspigot-settings"), "File for PandaSpigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("pandaspigot.yml"))
+                        .describedAs("Yml file");
+                // PandaSpigot end
             }
         };
 
-- 
2.29.2.windows.2


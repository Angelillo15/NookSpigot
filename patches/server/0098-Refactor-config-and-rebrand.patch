From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Angelillo15 <contact@angelillo15.es>
Date: Fri, 28 Jul 2023 12:42:39 +0200
Subject: [PATCH] Refactor config and rebrand


diff --git a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
index 11d42531ea1659ce8f932bd1b43fd58d20ef9e53..278c1e3fdc513ac46b5cbacac83a9023937ee6a1 100644
--- a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
@@ -4,11 +4,11 @@ import com.google.common.base.Charsets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
 import com.mojang.authlib.properties.PropertyMap;
+import es.angelillo15.config.NookSpigotConfig;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.UserCache;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.spigotmc.SpigotConfig;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -135,7 +135,7 @@ public class CraftPlayerProfile implements PlayerProfile {
     @Override
     public boolean completeFromCache() {
         MinecraftServer server = MinecraftServer.getServer();
-        return completeFromCache(false, com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().isProxyOnlineMode());
+        return completeFromCache(false, NookSpigotConfig.get().isProxyOnlineMode());
     }
     
     public boolean completeFromCache(boolean onlineMode) {
@@ -174,7 +174,7 @@ public class CraftPlayerProfile implements PlayerProfile {
     
     public boolean complete(boolean textures) {
         MinecraftServer server = MinecraftServer.getServer();
-        return complete(textures, com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().isProxyOnlineMode());
+        return complete(textures, NookSpigotConfig.get().isProxyOnlineMode());
     }
     
     public boolean complete(boolean textures, boolean onlineMode) {
diff --git a/src/main/java/es/angelillo15/NookSpigot.java b/src/main/java/es/angelillo15/NookSpigot.java
new file mode 100644
index 0000000000000000000000000000000000000000..090364d05dfcbea7900f2b2c301733703809d62b
--- /dev/null
+++ b/src/main/java/es/angelillo15/NookSpigot.java
@@ -0,0 +1,15 @@
+package es.angelillo15;
+
+import es.angelillo15.config.NookSpigotConfig;
+
+import java.io.File;
+
+public class NookSpigot {
+    public void onEnable() {
+        //NookSpigotConfig.init((File) options.valueOf("nookspigot-settings"));
+    }
+
+    public void onDisable() {
+
+    }
+}
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java b/src/main/java/es/angelillo15/config/NookSpigotConfig.java
similarity index 87%
rename from src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
rename to src/main/java/es/angelillo15/config/NookSpigotConfig.java
index ae3cdaca275b1a50c5c37c3dd0021c4bd579d373..5738489124cb393fe653b7f8afad615cd99c79ea 100644
--- a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
+++ b/src/main/java/es/angelillo15/config/NookSpigotConfig.java
@@ -1,4 +1,4 @@
-package com.hpfxd.pandaspigot.config;
+package es.angelillo15.config;
 
 import com.google.common.base.Throwables;
 import com.hpfxd.configurate.eoyaml.EOYamlConfigurationLoader;
@@ -19,10 +19,10 @@ import java.util.Map;
 
 @ConfigSerializable
 @SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal"})
-public class PandaSpigotConfig {
-    private static PandaSpigotConfig config;
-    private static PandaSpigotWorldConfig defaultWorldConfig;
-    private static final Map<String, PandaSpigotWorldConfig> worldConfigs = new HashMap<>();
+public class NookSpigotConfig {
+    private static NookSpigotConfig config;
+    private static NookSpigotWorldConfig defaultWorldConfig;
+    private static final Map<String, NookSpigotWorldConfig> worldConfigs = new HashMap<>();
     
     /**
      * Initialize the configuration, and load it from a file.
@@ -35,7 +35,7 @@ public class PandaSpigotConfig {
         EOYamlConfigurationLoader loader = EOYamlConfigurationLoader.builder()
                 .file(file)
                 .defaultOptions(o -> o
-                        .header("This is the configuration file for PandaSpigot.\n" +
+                        .header("This is the configuration file for NookSpigot.\n" +
                                 "Use caution when modifying settings, as some may impact gameplay in non-obvious ways.")
                         .mapFactory(MapFactories.insertionOrdered())
                         .serializers(build -> build.register(PacketLimiterConfig.class, new PacketLimiterConfig.Serializer())
@@ -46,7 +46,7 @@ public class PandaSpigotConfig {
         
         try {
             CommentedConfigurationNode root = loader.load();
-            config = root.get(PandaSpigotConfig.class);
+            config = root.get(NookSpigotConfig.class);
             
             // worlds
             CommentedConfigurationNode worldsNode = root.node("worlds")
@@ -57,7 +57,7 @@ public class PandaSpigotConfig {
                             "\n" +
                             "To specify settings for a specific world, just add a new section with the world's name.");
             ConfigurationNode defaultWorldNode = worldsNode.node("default");
-            defaultWorldConfig = defaultWorldNode.get(PandaSpigotWorldConfig.class);
+            defaultWorldConfig = defaultWorldNode.get(NookSpigotWorldConfig.class);
             defaultWorldNode.set(defaultWorldConfig); // populate default in config
             
             root.set(config); // update backing node
@@ -77,21 +77,21 @@ public class PandaSpigotConfig {
             if (worldName.equals("default")) continue; // skip "default"
             ConfigurationNode worldNode = entry.getValue();
             
-            PandaSpigotWorldConfig worldConfig = worldNode.get(PandaSpigotWorldConfig.class);
+            NookSpigotWorldConfig worldConfig = worldNode.get(NookSpigotWorldConfig.class);
             
             worldConfigs.put(worldName.toString(), worldConfig);
         }
     }
     
-    public static PandaSpigotWorldConfig getWorldConfig(String worldName) {
+    public static NookSpigotWorldConfig getWorldConfig(String worldName) {
         return worldConfigs.getOrDefault(worldName, defaultWorldConfig);
     }
     
-    public static PandaSpigotWorldConfig getWorldConfig(World world) {
+    public static NookSpigotWorldConfig getWorldConfig(World world) {
         return getWorldConfig(world.worldData.getName());
     }
     
-    public static PandaSpigotConfig get() {
+    public static NookSpigotConfig get() {
         return config;
     }
     
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java b/src/main/java/es/angelillo15/config/NookSpigotWorldConfig.java
similarity index 94%
rename from src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java
rename to src/main/java/es/angelillo15/config/NookSpigotWorldConfig.java
index 360ed37b95fce68941c234615b465090b8ea7308..9be2166967c28a7b4b4d176cfd1dd81be35244fe 100644
--- a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotWorldConfig.java
+++ b/src/main/java/es/angelillo15/config/NookSpigotWorldConfig.java
@@ -1,14 +1,14 @@
-package com.hpfxd.pandaspigot.config;
+package es.angelillo15.config;
 
 import org.spongepowered.configurate.objectmapping.ConfigSerializable;
 import org.spongepowered.configurate.objectmapping.meta.Comment;
 
 @ConfigSerializable
 @SuppressWarnings({"FieldCanBeLocal", "FieldMayBeFinal"})
-public class PandaSpigotWorldConfig {
+public class NookSpigotWorldConfig {
     @Comment("How many ticks in between sending time updates to players?\n" +
             "\n" +
-            "The vanilla option is 20 (every second), but PandaSpigot sets the default\n" +
+            "The vanilla option is 20 (every second), but NookSpigot sets the default\n" +
             "to 100 (every 5 seconds). You would probably be fine setting this even\n" +
             "higher, unless you're constantly changing the time, or the server is lagging.")
     public int timeUpdateFrequency = 100;
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java b/src/main/java/es/angelillo15/config/PacketLimiterConfig.java
similarity index 96%
rename from src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java
rename to src/main/java/es/angelillo15/config/PacketLimiterConfig.java
index 24d213655f038129e25bd75ce876ba68ed43105c..ae0c00e4d29c2cd59acdb01f836d76ee1addeded 100644
--- a/src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java
+++ b/src/main/java/es/angelillo15/config/PacketLimiterConfig.java
@@ -1,4 +1,4 @@
-package com.hpfxd.pandaspigot.config;
+package es.angelillo15.config;
 
 import net.minecraft.server.Packet;
 import org.bukkit.Bukkit;
@@ -80,12 +80,12 @@ public class PacketLimiterConfig {
                     try {
                         clazz = Class.forName("net.minecraft.server." + key);
                     } catch (ClassNotFoundException e) {
-                        Bukkit.getLogger().warning("Packet '" + key + "' does not exist, cannot limit it! Please update pandaspigot.yml");
+                        Bukkit.getLogger().warning("Packet '" + key + "' does not exist, cannot limit it! Please update nookspigot.yml");
                         continue;
                     }
 
                     if (!Packet.class.isAssignableFrom(clazz)) {
-                        Bukkit.getLogger().warning("Class '" + key + "' is not a packet, cannot limit it! Please update pandaspigot.yml");
+                        Bukkit.getLogger().warning("Class '" + key + "' is not a packet, cannot limit it! Please update nookspigot.yml");
                         continue;
                     }
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 2519d4ca1bb09d76caa2373164625aa6b692176e..c0f622d769de5241977c284ac42148aa1cdeaf7a 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,10 +1,9 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import java.io.BufferedReader;
+
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.util.Collections;
@@ -12,11 +11,15 @@ import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+
+import es.angelillo15.NookSpigot;
+import es.angelillo15.config.NookSpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
 import java.io.PrintStream;
+
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.craftbukkit.LoggerOutputStream;
@@ -42,7 +45,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     // PandaSpigot start - Modern tick loop
     public DedicatedServer(joptsimple.OptionSet options, Thread serverThread) {
         super(options, Proxy.NO_PROXY, DedicatedServer.a, serverThread);
-    // PandaSpigot end
+        // PandaSpigot end
         // CraftBukkit end
         Thread thread = new Thread("Server Infinisleeper") {
             {
@@ -136,12 +139,11 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.p = new EULA(new File("eula.txt"));
         // Spigot Start
-        boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
-        if ( eulaAgreed )
-        {
-            System.err.println( "You have used the Spigot command line EULA agreement flag." );
-            System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
-            System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+        boolean eulaAgreed = Boolean.getBoolean("com.mojang.eula.agree");
+        if (eulaAgreed) {
+            System.err.println("You have used the Spigot command line EULA agreement flag.");
+            System.err.println("By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula).");
+            System.err.println("If you do not agree to the above EULA please stop your server and remove this flag immediately.");
         }
         // Spigot End
         if (!this.p.a() && !eulaAgreed) { // Spigot
@@ -175,7 +177,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             this.r = WorldSettings.a(i);
             DedicatedServer.LOGGER.info("Default game type: " + this.r);
-            
+
             // PandaSpigot start - Unix domain socket support
             // PandaSpigot - Move SpigotConfig to load earlier, so that we can check IP forwarding status here.
             // Spigot start
@@ -197,20 +199,21 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 }
                 bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getServerIp().substring("unix:".length()));
             } else {
-            // PandaSpigot end
-            InetAddress inetaddress = null;
+                // PandaSpigot end
+                InetAddress inetaddress = null;
 
-            if (this.getServerIp().length() > 0) {
-                inetaddress = InetAddress.getByName(this.getServerIp());
-            }
+                if (this.getServerIp().length() > 0) {
+                    inetaddress = InetAddress.getByName(this.getServerIp());
+                }
 
-            if (this.R() < 0) {
-                this.setPort(this.propertyManager.getInt("server-port", 25565));
-            }
-            bindAddress = new java.net.InetSocketAddress(inetaddress, this.R());
+                if (this.R() < 0) {
+                    this.setPort(this.propertyManager.getInt("server-port", 25565));
+                }
+                bindAddress = new java.net.InetSocketAddress(inetaddress, this.R());
             }
-            com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) options.valueOf("pandaspigot-settings"));
             // PandaSpigot end
+
+            NookSpigotConfig.init((File) options.valueOf("nookspigot-settings")); // NookSpigot
             // PaperSpigot start
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
             org.github.paperspigot.PaperSpigotConfig.registerCommands();
@@ -220,16 +223,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             this.a(MinecraftEncryption.b());
             DedicatedServer.LOGGER.info("Starting Minecraft server on " + (this.getServerIp().length() == 0 ? "*" : this.getServerIp()) + ":" + this.R());
 
-        if (!org.spigotmc.SpigotConfig.lateBind) {
-            try {
-                this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
-            } catch (IOException ioexception) {
-                DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
-                DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
+            if (!org.spigotmc.SpigotConfig.lateBind) {
+                try {
+                    this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
+                } catch (IOException ioexception) {
+                    DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                    DedicatedServer.LOGGER.warn("The exception was: {}", new Object[]{ioexception.toString()});
+                    DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+                    return false;
+                }
             }
-        }
 
             // Spigot Start - Move DedicatedPlayerList up and bring plugin loading from CraftServer to here
             // this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
@@ -300,7 +303,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 DedicatedServer.LOGGER.info("Preparing level \"" + this.U() + "\"");
                 this.a(this.U(), this.U(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
-                String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
+                String s3 = String.format("%.3fs", new Object[]{Double.valueOf((double) i1 / 1.0E9D)});
 
                 DedicatedServer.LOGGER.info("Done (" + s3 + ")! For help, type \"help\" or \"?\"");
                 if (this.propertyManager.getBoolean("enable-query", false)) {
@@ -326,16 +329,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 }
                 // CraftBukkit end
 
-        if (org.spigotmc.SpigotConfig.lateBind) {
-            try {
-                this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
-            } catch (IOException ioexception) {
-                DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
-                DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
-            }
-        }
+                if (org.spigotmc.SpigotConfig.lateBind) {
+                    try {
+                        this.aq().bind(bindAddress); // PandaSpigot - Unix domain socket support
+                    } catch (IOException ioexception) {
+                        DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                        DedicatedServer.LOGGER.warn("The exception was: {}", new Object[]{ioexception.toString()});
+                        DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+                        return false;
+                    }
+                }
 
                 if (false && this.aS() > 0L) {  // Spigot - disable
                     Thread thread1 = new Thread(new ThreadWatchdog(this));
@@ -377,7 +380,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.propertyManager.getBoolean("hardcore", false);
     }
 
-    protected void a(CrashReport crashreport) {}
+    protected void a(CrashReport crashreport) {
+    }
 
     public CrashReport b(CrashReport crashreport) {
         crashreport = super.b(crashreport);
@@ -571,7 +575,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     protected boolean aR() {
-        server.getLogger().info( "**** Beginning UUID conversion, this may take A LONG time ****"); // Spigot, let the user know whats up!
+        server.getLogger().info("**** Beginning UUID conversion, this may take A LONG time ****"); // Spigot, let the user know whats up!
         boolean flag = false;
 
         int i;
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 86ab9994079c6e18e3aed885db4171d0d87b4c1a..bdb3d3608edc76a6f70637f7fdd0cfd786d5f5c6 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -9,6 +9,7 @@ import java.util.List;
 import java.util.UUID;
 
 // CraftBukkit start
+import es.angelillo15.config.NookSpigotWorldConfig;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -19,7 +20,6 @@ import org.bukkit.event.player.PlayerBedLeaveEvent;
 import org.bukkit.event.player.PlayerDropItemEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 import org.bukkit.event.player.PlayerVelocityEvent;
-import org.bukkit.util.Vector;
 // CraftBukkit end
 
 public abstract class EntityHuman extends EntityLiving {
@@ -1004,7 +1004,7 @@ public abstract class EntityHuman extends EntityLiving {
                     if (flag2) {
                         if (i > 0) {
                             // PandaSpigot start - Configurable knockback
-                            com.hpfxd.pandaspigot.config.PandaSpigotWorldConfig.KnockbackConfig knockbackConfig = entity.world.pandaSpigotConfig.knockback;
+                            NookSpigotWorldConfig.KnockbackConfig knockbackConfig = entity.world.pandaSpigotConfig.knockback;
                             entity.g(
                                     -MathHelper.sin(this.yaw * 3.1415927F / 180.0F) * (float) i * knockbackConfig.extraHorizontal,
                                     knockbackConfig.extraVertical,
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 94d8f2ffe938bd2d57d0297f9efc43ee55da3ba9..5b50503d5b9678c6ca7a760e22e89fc3e17c27b7 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -14,6 +14,7 @@ import java.util.UUID;
 import java.util.ArrayList;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import es.angelillo15.config.NookSpigotWorldConfig;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
@@ -23,8 +24,6 @@ import org.bukkit.event.entity.EntityRegainHealthEvent;
 import org.bukkit.event.vehicle.VehicleExitEvent;
 // CraftBukkit end
 
-import co.aikar.timings.SpigotTimings; // Spigot
-
 // PaperSpigot start
 import org.bukkit.Bukkit;
 import org.spigotmc.event.entity.EntityDismountEvent;
@@ -898,7 +897,7 @@ public abstract class EntityLiving extends Entity {
         if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
             this.ai = true;
             // PandaSpigot start - Configurable knockback
-            com.hpfxd.pandaspigot.config.PandaSpigotWorldConfig.KnockbackConfig knockbackConfig = entity.world.pandaSpigotConfig.knockback;
+            NookSpigotWorldConfig.KnockbackConfig knockbackConfig = entity.world.pandaSpigotConfig.knockback;
             double magnitude = MathHelper.sqrt(d0 * d0 + d1 * d1);
     
             double friction = knockbackConfig.friction;
diff --git a/src/main/java/net/minecraft/server/ItemWrittenBook.java b/src/main/java/net/minecraft/server/ItemWrittenBook.java
index 2b84704ac6d0ec0a0bd491b35030f23b2d02f2c2..db800a85d441cadc8805f94ac2ba2a9daa0a0923 100644
--- a/src/main/java/net/minecraft/server/ItemWrittenBook.java
+++ b/src/main/java/net/minecraft/server/ItemWrittenBook.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import es.angelillo15.config.NookSpigotConfig;
+
 public class ItemWrittenBook extends Item {
 
     public ItemWrittenBook() {
@@ -49,7 +51,7 @@ public class ItemWrittenBook extends Item {
         if (itemstack != null && itemstack.getTag() != null) {
             NBTTagCompound nbttagcompound = itemstack.getTag();
 
-            if (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().resolveSelectorsInBooks && !nbttagcompound.getBoolean("resolved")) { // PandaSpigot
+            if (NookSpigotConfig.get().resolveSelectorsInBooks && !nbttagcompound.getBoolean("resolved")) { // PandaSpigot
                 nbttagcompound.setBoolean("resolved", true);
                 if (b(nbttagcompound)) {
                     NBTTagList nbttaglist = nbttagcompound.getList("pages", 8);
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 9faa98501275cbd03a34dcc83f281d1e3f40a6e0..ec954d83121e9138918e140e673507c57a032716 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -3,9 +3,9 @@ package net.minecraft.server;
 import com.google.common.base.Charsets;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
+import es.angelillo15.config.NookSpigotConfig;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
-import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.math.BigInteger;
 import java.security.PrivateKey;
@@ -13,7 +13,6 @@ import java.util.Arrays;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.logging.Level;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
@@ -159,7 +158,7 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
 
     public String d() {
         // PandaSpigot start
-        String ip = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().logPlayerIpAddresses ? this.networkManager.getSocketAddress().toString() : "<ip address withheld>";
+        String ip = NookSpigotConfig.get().logPlayerIpAddresses ? this.networkManager.getSocketAddress().toString() : "<ip address withheld>";
         return this.i != null ? this.i.toString() + " (" + ip + ")" : ip;
         // PandaSpigot end
     }
diff --git a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
index 1f368aa9343b03610d8b2a9996743f779f0281ff..fb40504ec8add07f216dd141f18f29f4aad1f18f 100644
--- a/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
+++ b/src/main/java/net/minecraft/server/NameReferencingFileConverter.java
@@ -11,7 +11,6 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.yggdrasil.ProfileNotFoundException;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.ArrayList;
@@ -23,10 +22,10 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+
+import es.angelillo15.config.NookSpigotConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.bukkit.Bukkit;
-import org.github.paperspigot.event.ServerExceptionEvent;
 import org.github.paperspigot.exception.ServerInternalException;
 
 public class NameReferencingFileConverter {
@@ -66,7 +65,7 @@ public class NameReferencingFileConverter {
             }
         }), String.class);
 
-        if (minecraftserver.getOnlineMode() || com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().isProxyOnlineMode()) { // Spigot: bungee = online mode, for now. // PandaSpigot - Handle via setting
+        if (minecraftserver.getOnlineMode() || NookSpigotConfig.get().isProxyOnlineMode()) { // Spigot: bungee = online mode, for now. // PandaSpigot - Handle via setting
             minecraftserver.getGameProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, profilelookupcallback);
         } else {
             String[] astring1 = astring;
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 5c631068db79615bf51ed357bc9bda2b0ebb0c3b..b6d480064953056752f3e19241321fa8f31b784d 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import es.angelillo15.config.PacketLimiterConfig;
+import es.angelillo15.config.NookSpigotConfig;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -18,7 +20,6 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.SocketAddress;
 import java.util.Queue;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.Validate;
@@ -115,13 +116,13 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     // PandaSpigot end
     // PandaSpigot start - packet limiter
     protected final Object PACKET_LIMIT_LOCK = new Object();
-    protected final com.hpfxd.pandaspigot.util.IntervalledCounter allPacketCounts = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit() != null ? new com.hpfxd.pandaspigot.util.IntervalledCounter(
-        (long) (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit().packetLimitInterval * 1.0e9)
+    protected final com.hpfxd.pandaspigot.util.IntervalledCounter allPacketCounts = NookSpigotConfig.get().packetLimiter.getAllPacketsLimit() != null ? new com.hpfxd.pandaspigot.util.IntervalledCounter(
+        (long) (NookSpigotConfig.get().packetLimiter.getAllPacketsLimit().packetLimitInterval * 1.0e9)
     ) : null;
     protected final java.util.Map<Class<? extends Packet<?>>, com.hpfxd.pandaspigot.util.IntervalledCounter> packetSpecificLimits = new java.util.HashMap<>();
     private boolean stopReadingPackets;
     private void killForPacketSpam() {
-        IChatBaseComponent[] reason = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.ChatColor.translateAlternateColorCodes('&', com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getKickMessage()));
+        IChatBaseComponent[] reason = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.ChatColor.translateAlternateColorCodes('&', NookSpigotConfig.get().packetLimiter.getKickMessage()));
         this.a(new PacketPlayOutKickDisconnect(reason[0]), future -> {
             this.close(reason[0]);
             this.k();
@@ -180,19 +181,19 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                 return;
             }
             if (this.allPacketCounts != null ||
-                com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getPacketSpecificLimits().containsKey(packet.getClass())) {
+                NookSpigotConfig.get().packetLimiter.getPacketSpecificLimits().containsKey(packet.getClass())) {
                 long time = System.nanoTime();
                 synchronized (PACKET_LIMIT_LOCK) {
                     if (this.allPacketCounts != null) {
                         this.allPacketCounts.updateAndAdd(1, time);
-                        if (this.allPacketCounts.getRate() >= com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit().maxPacketRate) {
+                        if (this.allPacketCounts.getRate() >= NookSpigotConfig.get().packetLimiter.getAllPacketsLimit().maxPacketRate) {
                             this.killForPacketSpam();
                             return;
                         }
                     }
 
                     for (Class<?> check = packet.getClass(); check != Object.class; check = check.getSuperclass()) {
-                        com.hpfxd.pandaspigot.config.PacketLimiterConfig.PacketLimit packetSpecificLimit = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getPacketSpecificLimits().get(check);
+                        PacketLimiterConfig.PacketLimit packetSpecificLimit = NookSpigotConfig.get().packetLimiter.getPacketSpecificLimits().get(check);
                         if (packetSpecificLimit == null) {
                             continue;
                         }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 23bd5d11f8b909817855f593adc51d3ca5d9f976..fda5deeb483347aed3399394c75d935fe53f5020 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
-import com.google.common.util.concurrent.Futures;
+import es.angelillo15.config.NookSpigotConfig;
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
@@ -11,7 +11,6 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
@@ -2016,8 +2015,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private boolean validateBook(ItemStack testStack) {
         NBTTagList pageList = testStack.getTag().getList("pages", 8);
         long byteTotal = 0;
-        int maxBookPageSize = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxBookPageSize;
-        double multiplier = Math.max(0.3D, Math.min(1D, com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxBookTotalSizeMultiplier));
+        int maxBookPageSize = NookSpigotConfig.get().maxBookPageSize;
+        double multiplier = Math.max(0.3D, Math.min(1D, NookSpigotConfig.get().maxBookTotalSizeMultiplier));
         long byteAllowed = maxBookPageSize;
         for (int i = 0; i < pageList.size(); ++i) {
             String testString = pageList.getString(i);
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index ada9cf25b091c2df24301bb5e82d1f76fbd929e5..f961b699ab7bbb0c310e355e0b8334b08a400a1f 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -4,6 +4,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import es.angelillo15.config.NookSpigotConfig;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
@@ -119,7 +120,7 @@ public abstract class PlayerList {
         String s1 = "local";
 
         if (networkmanager.getSocketAddress() != null) {
-            s1 = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().logPlayerIpAddresses ? networkmanager.getSocketAddress().toString() : "<ip address withheld>"; // PandaSpigot
+            s1 = NookSpigotConfig.get().logPlayerIpAddresses ? networkmanager.getSocketAddress().toString() : "<ip address withheld>"; // PandaSpigot
         }
 
         // Spigot start - spawn location event
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index ae94817c51f57bef9f1b0b8687b645883f6ec985..f8e385b9d738da0bc5f7462452aa54afa92fbfdf 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import es.angelillo15.config.NookSpigotConfig;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -198,7 +199,7 @@ public class ServerConnection {
                                 throw new ReportedException(crashreport);
                             }
 
-                            ServerConnection.e.warn("Failed to handle packet for " + (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().logPlayerIpAddresses ? networkmanager.getSocketAddress() : "<ip address withheld>"), exception); // PandaSpigot
+                            ServerConnection.e.warn("Failed to handle packet for " + (NookSpigotConfig.get().logPlayerIpAddresses ? networkmanager.getSocketAddress() : "<ip address withheld>"), exception); // PandaSpigot
                             final ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
 
                             networkmanager.a(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
diff --git a/src/main/java/net/minecraft/server/UserCache.java b/src/main/java/net/minecraft/server/UserCache.java
index d7dee8b3920b1803f751f3fa206fe035764ad6c0..27f90ed6fbe9d2ed9b3d25a29f3952ca791c1fec 100644
--- a/src/main/java/net/minecraft/server/UserCache.java
+++ b/src/main/java/net/minecraft/server/UserCache.java
@@ -30,11 +30,12 @@ import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
+
+import es.angelillo15.config.NookSpigotConfig;
 import org.apache.commons.io.IOUtils;
 
 public class UserCache {
@@ -83,7 +84,7 @@ public class UserCache {
         };
 
         // PandaSpigot start - Handle via setting
-        if (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().isProxyOnlineMode()) {
+        if (NookSpigotConfig.get().isProxyOnlineMode()) {
             minecraftserver.getGameProfileRepository().findProfilesByNames(new String[] { s}, Agent.MINECRAFT, profilelookupcallback);
         } else if (agameprofile[0] == null) {
         // PandaSpigot end
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index daa1d6a4d6ec5e175f36d9fc87675c68558d5abb..db78a32ff81bd2cfa0798fb7d2b4adec225cfbeb 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -4,18 +4,18 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import es.angelillo15.config.NookSpigotConfig;
+import es.angelillo15.config.NookSpigotWorldConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet;
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
-import co.aikar.timings.SpigotTimings;
 
 import java.util.*;
 import java.util.concurrent.Callable;
@@ -163,7 +163,7 @@ public abstract class World implements IBlockAccess {
 
     public final org.github.paperspigot.PaperSpigotWorldConfig paperSpigotConfig; // PaperSpigot
 
-    public com.hpfxd.pandaspigot.config.PandaSpigotWorldConfig pandaSpigotConfig; // PandaSpigot
+    public NookSpigotWorldConfig pandaSpigotConfig; // PandaSpigot
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
 
@@ -188,7 +188,7 @@ public abstract class World implements IBlockAccess {
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
-        this.pandaSpigotConfig = com.hpfxd.pandaspigot.config.PandaSpigotConfig.getWorldConfig(worlddata.getName()); // PandaSpigot
+        this.pandaSpigotConfig = NookSpigotConfig.getWorldConfig(worlddata.getName()); // PandaSpigot
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b9ae3d69da3dc75b581b948985b8f0d9c85fc223..946fcdbdd832a6e3f86fc13f6e12a9da4d4f709b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -23,6 +23,7 @@ import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
+import es.angelillo15.config.NookSpigotConfig;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -75,7 +76,6 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.event.world.WorldInitEvent;
 import org.bukkit.event.world.WorldLoadEvent;
-import org.bukkit.event.world.WorldSaveEvent;
 import org.bukkit.event.world.WorldUnloadEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
@@ -748,7 +748,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
-        com.hpfxd.pandaspigot.config.PandaSpigotConfig.init((File) console.options.valueOf("pandaspigot-settings")); // PandaSpigot
+        NookSpigotConfig.init((File) console.options.valueOf("nookspigot-settings")); // NookSpigot
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -765,7 +765,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperSpigotConfig.init(); // PaperSpigot
-            world.pandaSpigotConfig = com.hpfxd.pandaspigot.config.PandaSpigotConfig.getWorldConfig(world); // PandaSpigot
+            world.pandaSpigotConfig = NookSpigotConfig.getWorldConfig(world); // PandaSpigot
         }
 
         pluginManager.clearPlugins();
@@ -1376,7 +1376,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( MinecraftServer.getServer().getOnlineMode() || com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().isProxyOnlineMode() ) // PandaSpigot - Handle via setting
+            if ( MinecraftServer.getServer().getOnlineMode() || NookSpigotConfig.get().isProxyOnlineMode() ) // PandaSpigot - Handle via setting
             {
                 profile = MinecraftServer.getServer().getUserCache().getProfile( name );
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 3fdc95dc79531f909728af4e543a3f9b621f5159..a55635be9509d0eab983c7ad1e51f12323e67032 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -132,13 +132,15 @@ public class Main {
                         .describedAs("Yml file");
                 // PaperSpigot End
 
-                // PandaSpigot start
-                acceptsAll(asList("pandaspigot-settings"), "File for PandaSpigot settings")
+                // NookSpigot start
+                acceptsAll(asList("nookspigot-settings"), "File for NookSpigot settings")
                         .withRequiredArg()
                         .ofType(File.class)
-                        .defaultsTo(new File("pandaspigot.yml"))
+                        .defaultsTo(new File("NookSpigot.yml"))
                         .describedAs("Yml file");
+                // NookSpigot end
 
+                //PandaSpigot start
                 acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
                     .withRequiredArg()
                     .ofType(File.class)
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index ccd7b3036e1f08ca3c95bdc9627c5b3d0fca3953..fdf1ca0345aebe0348ea85dbbfcd34a503460ff1 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -8,6 +8,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+import es.angelillo15.config.NookSpigotConfig;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.IScoreboardCriteria;
 import net.minecraft.server.MinecraftServer;
@@ -46,7 +47,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
         org.spigotmc.AsyncCatcher.catchOp( "scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ScoreboardServer(server));
         // PandaSpigot start
-        if (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().trackPluginScoreboards) {
+        if (NookSpigotConfig.get().trackPluginScoreboards) {
             scoreboard.registeredGlobally = true;
         scoreboards.add(scoreboard);
         }
